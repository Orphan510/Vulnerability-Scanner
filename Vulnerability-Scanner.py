import requests
from bs4 import BeautifulSoup
from termcolor import colored
from tabulate import tabulate
import urllib3
import pyfiglet

# تعطيل تحذيرات SSL
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# عنوان الأداة بالألوان المطلوبة
title = pyfiglet.figlet_format("Vulnerability Scanner", font="slant")
print(colored(title, 'red'))
print(colored("Don't forget to follow my Instagram account ahu_orphan", 'yellow'))
print(colored("This tool is presented by: Lulzsec Black Team", 'green'))
print ("\033[93m Link to the team's channel on Telegram: https://t.me/Luzsec_Black")
# قائمة المسارات
paths = [
    "/",
    "/admin/",
    "/backup/",
    "/uploads/",
    "/files/",
    "/images/"
]

# دالة لفحص "Index of"
def check_index_of(url):
    try:
        response = requests.get(url, verify=False)
        if response.status_code == 200:
            soup = BeautifulSoup(response.text, 'html.parser')
            if soup.title and 'Index of' in soup.title.text:
                return True
    except requests.RequestException as e:
        print(f"Error connecting to {url}: {e}")
    return False

# دالة لفحص ثغرة CSRF
def check_csrf(url):
    try:
        response = requests.get(url, verify=False)
        if response.status_code == 200:
            if 'csrf' not in response.text.lower():
                return True
    except requests.RequestException as e:
        print(f"Error connecting to {url}: {e}")
    return False

# إدخال عنوان الموقع
website_url = input("Enter the website URL: ")

# نتائج الفحص
results = []

# فحص كل مسار
for path in paths:
    full_url = website_url.rstrip('/') + path
    is_vulnerable_index = check_index_of(full_url)
    is_vulnerable_csrf = check_csrf(full_url)
    
    if is_vulnerable_index:
        index_status = colored('Vulnerable (Index of)', 'red')
    else:
        index_status = colored('Not Vulnerable (Index of)', 'green')
    
    if is_vulnerable_csrf:
        csrf_status = colored('Vulnerable (CSRF)', 'red')
    else:
        csrf_status = colored('Not Vulnerable (CSRF)', 'green')
    
    results.append([full_url, index_status, csrf_status])

# طباعة النتائج
print(tabulate(results, headers=["Path", "Index of Status", "CSRF Status"], tablefmt="grid"))
